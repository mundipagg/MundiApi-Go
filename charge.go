/*
 * mundiapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package mundiapi

import (
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"github.com/mundipagg/mundiapi/internal/helper"
	"time"
)

/*
 * Interface for the charges
 */
type Charges interface {
	UpdateChargeCard(string, *UpdateChargeCardRequest, *string) (*GetChargeResponse, error)
	UpdateChargePaymentMethod(string, *UpdateChargePaymentMethodRequest, *string) (*GetChargeResponse, error)
	CreateCharge(*CreateChargeRequest, *string) (*GetChargeResponse, error)
	GetCharge(string) (*GetChargeResponse, error)
	RetryCharge(string, *string) (*GetChargeResponse, error)
	GetCharges(*int64, *int64, *string, *string, *string, *string, *string, *time.Time, *time.Time) (*ListChargesResponse, error)
	UpdateChargeMetadata(string, *UpdateMetadataRequest, *string) (*GetChargeResponse, error)
	CancelCharge(string, *CreateCancelChargeRequest, *string) (*GetChargeResponse, error)
	CaptureCharge(string, *CreateCaptureChargeRequest, *string) (*GetChargeResponse, error)
	UpdateChargeDueDate(string, *UpdateChargeDueDateRequest, *string) (*GetChargeResponse, error)
	ConfirmPayment(string, *CreateConfirmPaymentRequest, *string) (*GetChargeResponse, error)
	GetChargeTransactions(string, *int64, *int64) (*ListChargeTransactionsResponse, error)
	GetChargesSummary(string, *time.Time, *time.Time) (*GetChargesSummaryResponse, error)
}

/*
 * Factory for the Charges interaface returning charges
 */
func NewCharges(config Configuration) *charges {
	client := new(charges)
	client.config = config
	return client
}

/*
 * Client structure as interface implementation
 */
type charges struct {
	config Configuration
}

/**
 * Updates the card from a charge
 * @param    string                                     chargeId            parameter: Required
 * @param    *UpdateChargeCardRequest        request             parameter: Required
 * @param    *string                                    idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) UpdateChargeCard(
	chargeId string,
	request *UpdateChargeCardRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}/card"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates a charge's payment method
 * @param    string                                              chargeId            parameter: Required
 * @param    *UpdateChargePaymentMethodRequest        request             parameter: Required
 * @param    *string                                             idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) UpdateChargePaymentMethod(
	chargeId string,
	request *UpdateChargePaymentMethodRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}/payment-method"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Creates a new charge
 * @param    *CreateChargeRequest        request             parameter: Required
 * @param    *string                                idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) CreateCharge(
	request *CreateChargeRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/Charges"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Get a charge from its id
 * @param    string        chargeId      parameter: Required
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) GetCharge(
	chargeId string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Retries a charge
 * @param    string         chargeId            parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) RetryCharge(
	chargeId string,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}/retry"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, nil, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Lists all charges
 * @param    *int64            page               parameter: Optional
 * @param    *int64            size               parameter: Optional
 * @param    *string           code               parameter: Optional
 * @param    *string           status             parameter: Optional
 * @param    *string           paymentMethod      parameter: Optional
 * @param    *string           customerId         parameter: Optional
 * @param    *string           orderId            parameter: Optional
 * @param    *time.Time        createdSince       parameter: Optional
 * @param    *time.Time        createdUntil       parameter: Optional
 * @return	Returns the *ListChargesResponse response from the API call
 */
func (c *charges) GetCharges(
	page *int64,
	size *int64,
	code *string,
	status *string,
	paymentMethod *string,
	customerId *string,
	orderId *string,
	createdSince *time.Time,
	createdUntil *time.Time) (*ListChargesResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page":           page,
		"size":           size,
		"code":           code,
		"status":         status,
		"payment_method": paymentMethod,
		"customer_id":    customerId,
		"order_id":       orderId,
		"created_since":  createdSince,
		"created_until":  createdUntil,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListChargesResponse = &ListChargesResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the metadata from a charge
 * @param    string                                   chargeId            parameter: Required
 * @param    *UpdateMetadataRequest        request             parameter: Required
 * @param    *string                                  idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) UpdateChargeMetadata(
	chargeId string,
	request *UpdateMetadataRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/Charges/{charge_id}/metadata"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Cancel a charge
 * @param    string                                       chargeId            parameter: Required
 * @param    *CreateCancelChargeRequest        request             parameter: Optional
 * @param    *string                                      idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) CancelCharge(
	chargeId string,
	request *CreateCancelChargeRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Captures a charge
 * @param    string                                        chargeId            parameter: Required
 * @param    *CreateCaptureChargeRequest        request             parameter: Optional
 * @param    *string                                       idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) CaptureCharge(
	chargeId string,
	request *CreateCaptureChargeRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}/capture"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the due date from a charge
 * @param    string                                        chargeId            parameter: Required
 * @param    *UpdateChargeDueDateRequest        request             parameter: Required
 * @param    *string                                       idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) UpdateChargeDueDate(
	chargeId string,
	request *UpdateChargeDueDateRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/Charges/{charge_id}/due-date"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string                                         chargeId            parameter: Required
 * @param    *CreateConfirmPaymentRequest        request             parameter: Optional
 * @param    *string                                        idempotencyKey      parameter: Optional
 * @return	Returns the *GetChargeResponse response from the API call
 */
func (c *charges) ConfirmPayment(
	chargeId string,
	request *CreateConfirmPaymentRequest,
	idempotencyKey *string) (*GetChargeResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}/confirm-payment"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargeResponse = &GetChargeResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        chargeId      parameter: Required
 * @param    *int64        page          parameter: Optional
 * @param    *int64        size          parameter: Optional
 * @return	Returns the *ListChargeTransactionsResponse response from the API call
 */
func (c *charges) GetChargeTransactions(
	chargeId string,
	page *int64,
	size *int64) (*ListChargeTransactionsResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/{charge_id}/transactions"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"charge_id": chargeId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page": page,
		"size": size,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListChargeTransactionsResponse = &ListChargeTransactionsResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string            status            parameter: Required
 * @param    *time.Time        createdSince      parameter: Optional
 * @param    *time.Time        createdUntil      parameter: Optional
 * @return	Returns the *GetChargesSummaryResponse response from the API call
 */
func (c *charges) GetChargesSummary(
	status string,
	createdSince *time.Time,
	createdUntil *time.Time) (*GetChargesSummaryResponse, error) {
	//the endpoint path uri
	_pathUrl := "/charges/summary"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"status":        status,
		"created_since": createdSince,
		"created_until": createdUntil,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, c.config.BasicAuthUserName(), c.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetChargesSummaryResponse = &GetChargesSummaryResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}
