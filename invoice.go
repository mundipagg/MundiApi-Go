/*
 * mundiapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package mundiapi

import (
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"github.com/mundipagg/mundiapi/internal/helper"
	"time"
)

/*
 * Interface for the invoice
 */
type Invoices interface {
	CancelInvoice(string, *string) (*GetInvoiceResponse, error)
	GetInvoice(string) (*GetInvoiceResponse, error)
	CreateInvoice(string, string, *CreateInvoiceRequest, *string) (*GetInvoiceResponse, error)
	UpdateInvoiceStatus(string, *UpdateInvoiceStatusRequest, *string) (*GetInvoiceResponse, error)
	GetInvoices(*int64, *int64, *string, *string, *string, *time.Time, *time.Time, *string, *time.Time, *time.Time) (*ListInvoicesResponse, error)
	UpdateInvoiceMetadata(string, *UpdateMetadataRequest, *string) (*GetInvoiceResponse, error)
	GetPartialInvoice(string) (*GetInvoiceResponse, error)
}

/*
 * Factory for the Invoices interaface returning invoice
 */
func NewInvoices(config Configuration) *invoice {
	client := new(invoice)
	client.config = config
	return client
}

/*
 * Client structure as interface implementation
 */
type invoice struct {
	config Configuration
}

/**
 * Cancels an invoice
 * @param    string         invoiceId           parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetInvoiceResponse response from the API call
 */
func (i *invoice) CancelInvoice(
	invoiceId string,
	idempotencyKey *string) (*GetInvoiceResponse, error) {
	//the endpoint path uri
	_pathUrl := "/invoices/{invoice_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"invoice_id": invoiceId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, nil, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetInvoiceResponse = &GetInvoiceResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Gets an invoice
 * @param    string        invoiceId      parameter: Required
 * @return	Returns the *GetInvoiceResponse response from the API call
 */
func (i *invoice) GetInvoice(
	invoiceId string) (*GetInvoiceResponse, error) {
	//the endpoint path uri
	_pathUrl := "/invoices/{invoice_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"invoice_id": invoiceId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetInvoiceResponse = &GetInvoiceResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Create an Invoice
 * @param    string                                  subscriptionId      parameter: Required
 * @param    string                                  cycleId             parameter: Required
 * @param    *CreateInvoiceRequest        request             parameter: Optional
 * @param    *string                                 idempotencyKey      parameter: Optional
 * @return	Returns the *GetInvoiceResponse response from the API call
 */
func (i *invoice) CreateInvoice(
	subscriptionId string,
	cycleId string,
	request *CreateInvoiceRequest,
	idempotencyKey *string) (*GetInvoiceResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/cycles/{cycle_id}/pay"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"cycle_id":        cycleId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetInvoiceResponse = &GetInvoiceResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the status from an invoice
 * @param    string                                        invoiceId           parameter: Required
 * @param    *UpdateInvoiceStatusRequest        request             parameter: Required
 * @param    *string                                       idempotencyKey      parameter: Optional
 * @return	Returns the *GetInvoiceResponse response from the API call
 */
func (i *invoice) UpdateInvoiceStatus(
	invoiceId string,
	request *UpdateInvoiceStatusRequest,
	idempotencyKey *string) (*GetInvoiceResponse, error) {
	//the endpoint path uri
	_pathUrl := "/invoices/{invoice_id}/status"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"invoice_id": invoiceId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetInvoiceResponse = &GetInvoiceResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Gets all invoices
 * @param    *int64            page                parameter: Optional
 * @param    *int64            size                parameter: Optional
 * @param    *string           code                parameter: Optional
 * @param    *string           customerId          parameter: Optional
 * @param    *string           subscriptionId      parameter: Optional
 * @param    *time.Time        createdSince        parameter: Optional
 * @param    *time.Time        createdUntil        parameter: Optional
 * @param    *string           status              parameter: Optional
 * @param    *time.Time        dueSince            parameter: Optional
 * @param    *time.Time        dueUntil            parameter: Optional
 * @return	Returns the *ListInvoicesResponse response from the API call
 */
func (i *invoice) GetInvoices(
	page *int64,
	size *int64,
	code *string,
	customerId *string,
	subscriptionId *string,
	createdSince *time.Time,
	createdUntil *time.Time,
	status *string,
	dueSince *time.Time,
	dueUntil *time.Time) (*ListInvoicesResponse, error) {
	//the endpoint path uri
	_pathUrl := "/invoices"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page":            page,
		"size":            size,
		"code":            code,
		"customer_id":     customerId,
		"subscription_id": subscriptionId,
		"created_since":   createdSince,
		"created_until":   createdUntil,
		"status":          status,
		"due_since":       dueSince,
		"due_until":       dueUntil,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListInvoicesResponse = &ListInvoicesResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the metadata from an invoice
 * @param    string                                   invoiceId           parameter: Required
 * @param    *UpdateMetadataRequest        request             parameter: Required
 * @param    *string                                  idempotencyKey      parameter: Optional
 * @return	Returns the *GetInvoiceResponse response from the API call
 */
func (i *invoice) UpdateInvoiceMetadata(
	invoiceId string,
	request *UpdateMetadataRequest,
	idempotencyKey *string) (*GetInvoiceResponse, error) {
	//the endpoint path uri
	_pathUrl := "/invoices/{invoice_id}/metadata"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"invoice_id": invoiceId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetInvoiceResponse = &GetInvoiceResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @return	Returns the *GetInvoiceResponse response from the API call
 */
func (i *invoice) GetPartialInvoice(
	subscriptionId string) (*GetInvoiceResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/partial-invoice"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, i.config.BasicAuthUserName(), i.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetInvoiceResponse = &GetInvoiceResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}
