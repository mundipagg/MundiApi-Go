/*
 * mundiapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package mundiapi

import (
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"github.com/mundipagg/mundiapi/internal/helper"
	"time"
)

/*
 * Interface for the seller
 */
type Sellers interface {
	GetSellerById(string) (*GetSellerResponse, error)
	DeleteSeller(string, *string) (*GetSellerResponse, error)
	CreateSeller(*CreateSellerRequest, *string) (*GetSellerResponse, error)
	GetSellers(*int64, *int64, *string, *string, *string, *string, *string, *time.Time, *time.Time) (*ListSellerResponse, error)
	UpdateSeller(string, *UpdateSellerRequest, *string) (*GetSellerResponse, error)
	UpdateSellerMetadata(string, *UpdateMetadataRequest, *string) (*GetSellerResponse, error)
}

/*
 * Factory for the Sellers interaface returning seller
 */
func NewSellers(config Configuration) *seller {
	client := new(seller)
	client.config = config
	return client
}

/*
 * Client structure as interface implementation
 */
type seller struct {
	config Configuration
}

/**
 * TODO: type endpoint description here
 * @param    string        id     parameter: Required
 * @return	Returns the *GetSellerResponse response from the API call
 */
func (s *seller) GetSellerById(
	id string) (*GetSellerResponse, error) {
	//the endpoint path uri
	_pathUrl := "/sellers/{id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"id": id,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSellerResponse = &GetSellerResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string         sellerId            parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetSellerResponse response from the API call
 */
func (s *seller) DeleteSeller(
	sellerId string,
	idempotencyKey *string) (*GetSellerResponse, error) {
	//the endpoint path uri
	_pathUrl := "/sellers/{sellerId}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"sellerId": sellerId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSellerResponse = &GetSellerResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    *CreateSellerRequest        request             parameter: Required
 * @param    *string                                idempotencyKey      parameter: Optional
 * @return	Returns the *GetSellerResponse response from the API call
 */
func (s *seller) CreateSeller(
	request *CreateSellerRequest,
	idempotencyKey *string) (*GetSellerResponse, error) {
	//the endpoint path uri
	_pathUrl := "/sellers/"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSellerResponse = &GetSellerResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    *int64            page              parameter: Optional
 * @param    *int64            size              parameter: Optional
 * @param    *string           name              parameter: Optional
 * @param    *string           document          parameter: Optional
 * @param    *string           code              parameter: Optional
 * @param    *string           status            parameter: Optional
 * @param    *string           mtype             parameter: Optional
 * @param    *time.Time        createdSince      parameter: Optional
 * @param    *time.Time        createdUntil      parameter: Optional
 * @return	Returns the *ListSellerResponse response from the API call
 */
func (s *seller) GetSellers(
	page *int64,
	size *int64,
	name *string,
	document *string,
	code *string,
	status *string,
	mtype *string,
	createdSince *time.Time,
	createdUntil *time.Time) (*ListSellerResponse, error) {
	//the endpoint path uri
	_pathUrl := "/sellers"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page":          page,
		"size":          size,
		"name":          name,
		"document":      document,
		"code":          code,
		"status":        status,
		"type":          mtype,
		"created_Since": createdSince,
		"created_Until": createdUntil,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListSellerResponse = &ListSellerResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string                                 id                  parameter: Required
 * @param    *UpdateSellerRequest        request             parameter: Required
 * @param    *string                                idempotencyKey      parameter: Optional
 * @return	Returns the *GetSellerResponse response from the API call
 */
func (s *seller) UpdateSeller(
	id string,
	request *UpdateSellerRequest,
	idempotencyKey *string) (*GetSellerResponse, error) {
	//the endpoint path uri
	_pathUrl := "/sellers/{id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"id": id,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PutWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSellerResponse = &GetSellerResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string                                   sellerId            parameter: Required
 * @param    *UpdateMetadataRequest        request             parameter: Required
 * @param    *string                                  idempotencyKey      parameter: Optional
 * @return	Returns the *GetSellerResponse response from the API call
 */
func (s *seller) UpdateSellerMetadata(
	sellerId string,
	request *UpdateMetadataRequest,
	idempotencyKey *string) (*GetSellerResponse, error) {
	//the endpoint path uri
	_pathUrl := "/sellers/{seller_id}/metadata"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"seller_id": sellerId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSellerResponse = &GetSellerResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}
