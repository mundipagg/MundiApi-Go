/*
 * mundiapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package mundiapi

import (
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"github.com/mundipagg/mundiapi/internal/helper"
	"time"
)

/*
 * Interface for the subscription
 */
type Subscriptions interface {
	GetIncrementById(string, string) (*GetIncrementResponse, error)
	UpdateSubscriptionStartAt(string, *UpdateSubscriptionStartAtRequest, *string) (*GetSubscriptionResponse, error)
	UpdateSubscriptionCard(string, *UpdateSubscriptionCardRequest, *string) (*GetSubscriptionResponse, error)
	UpdateSubscriptionItem(string, string, *UpdateSubscriptionItemRequest, *string) (*GetSubscriptionItemResponse, error)
	CreateUsage(string, string, *CreateUsageRequest, *string) (*GetUsageResponse, error)
	GetSubscription(string) (*GetSubscriptionResponse, error)
	UpdateSubscriptionPaymentMethod(string, *UpdateSubscriptionPaymentMethodRequest, *string) (*GetSubscriptionResponse, error)
	CreateSubscription(*CreateSubscriptionRequest, *string) (*GetSubscriptionResponse, error)
	CreateSubscriptionItem(string, *CreateSubscriptionItemRequest, *string) (*GetSubscriptionItemResponse, error)
	CreateDiscount(string, *CreateDiscountRequest, *string) (*GetDiscountResponse, error)
	GetSubscriptionItem(string, string) (*GetSubscriptionItemResponse, error)
	UpdateSubscriptionAffiliationId(string, *UpdateSubscriptionAffiliationIdRequest, *string) (*GetSubscriptionResponse, error)
	CreateAnUsage(string, string, *string) (*GetUsageResponse, error)
	GetSubscriptions(*int64, *int64, *string, *string, *string, *string, *string, *string, *time.Time, *time.Time, *time.Time, *time.Time) (*ListSubscriptionsResponse, error)
	UpdateSubscriptionMetadata(string, *UpdateMetadataRequest, *string) (*GetSubscriptionResponse, error)
	DeleteSubscriptionItem(string, string, *string) (*GetSubscriptionItemResponse, error)
	DeleteUsage(string, string, string, *string) (*GetUsageResponse, error)
	DeleteDiscount(string, string, *string) (*GetDiscountResponse, error)
	CancelSubscription(string, *CreateCancelSubscriptionRequest, *string) (*GetSubscriptionResponse, error)
	GetDiscountById(string, string) (*GetDiscountResponse, error)
	GetDiscounts(string, int64, int64) (*ListDiscountsResponse, error)
	CreateIncrement(string, *CreateIncrementRequest, *string) (*GetIncrementResponse, error)
	GetIncrements(string, *int64, *int64) (*ListIncrementsResponse, error)
	DeleteIncrement(string, string, *string) (*GetIncrementResponse, error)
	GetUsagesDetails(string, *string, *int64, *int64, *string, *string) (*GetUsagesDetailsResponse, error)
	GetUsages(string, string, *int64, *int64, *string, *string) (*ListUsagesResponse, error)
	GetSubscriptionItems(string, *int64, *int64, *string, *string, *string, *string, *string, *string) (*ListSubscriptionItemsResponse, error)
	UpdateSubscriptionDueDays(string, *UpdateSubscriptionDueDaysRequest, *string) (*GetSubscriptionResponse, error)
	UpdateSubscriptionMiniumPrice(string, *UpdateSubscriptionMinimumPriceRequest, *string) (*GetSubscriptionResponse, error)
	UpdateSubscriptionBillingDate(string, *UpdateSubscriptionBillingDateRequest, *string) (*GetSubscriptionResponse, error)
	UpdateLatestPeriodEndAt(string, *UpdateCurrentCycleEndDateRequest, *string) (*GetSubscriptionResponse, error)
	UpdateCurrentCycleStatus(string, *UpdateCurrentCycleStatusRequest, *string) error
	GetSubscriptionCycles(string, string, string) (*ListCyclesResponse, error)
	GetSubscriptionCycleById(string, string) (*GetPeriodResponse, error)
	RenewSubscription(string, *string) (*GetPeriodResponse, error)
	GetUsageReport(string, string) (*GetUsageReportResponse, error)
}

/*
 * Factory for the Subscriptions interaface returning subscription
 */
func NewSubscriptions(config Configuration) *subscription {
	client := new(subscription)
	client.config = config
	return client
}

/*
 * Client structure as interface implementation
 */
type subscription struct {
	config Configuration
}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    string        incrementId         parameter: Required
 * @return	Returns the *GetIncrementResponse response from the API call
 */
func (s *subscription) GetIncrementById(
	subscriptionId string,
	incrementId string) (*GetIncrementResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/increments/{increment_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"increment_id":    incrementId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetIncrementResponse = &GetIncrementResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the start at date from a subscription
 * @param    string                                              subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionStartAtRequest        request             parameter: Required
 * @param    *string                                             idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionStartAt(
	subscriptionId string,
	request *UpdateSubscriptionStartAtRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/start-at"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the credit card from a subscription
 * @param    string                                           subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionCardRequest        request             parameter: Required
 * @param    *string                                          idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionCard(
	subscriptionId string,
	request *UpdateSubscriptionCardRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/card"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates a subscription item
 * @param    string                                           subscriptionId      parameter: Required
 * @param    string                                           itemId              parameter: Required
 * @param    *UpdateSubscriptionItemRequest        body                parameter: Required
 * @param    *string                                          idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionItemResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionItem(
	subscriptionId string,
	itemId string,
	body *UpdateSubscriptionItemRequest,
	idempotencyKey *string) (*GetSubscriptionItemResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{item_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"item_id":         itemId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PutWithAuth(_queryBuilder, headers, body, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionItemResponse = &GetSubscriptionItemResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Creates a usage
 * @param    string                                subscriptionId      parameter: Required
 * @param    string                                itemId              parameter: Required
 * @param    *CreateUsageRequest        body                parameter: Required
 * @param    *string                               idempotencyKey      parameter: Optional
 * @return	Returns the *GetUsageResponse response from the API call
 */
func (s *subscription) CreateUsage(
	subscriptionId string,
	itemId string,
	body *CreateUsageRequest,
	idempotencyKey *string) (*GetUsageResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{item_id}/usages"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"item_id":         itemId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, body, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetUsageResponse = &GetUsageResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Gets a subscription
 * @param    string        subscriptionId      parameter: Required
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) GetSubscription(
	subscriptionId string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the payment method from a subscription
 * @param    string                                                    subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionPaymentMethodRequest        request             parameter: Required
 * @param    *string                                                   idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionPaymentMethod(
	subscriptionId string,
	request *UpdateSubscriptionPaymentMethodRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/payment-method"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Creates a new subscription
 * @param    *CreateSubscriptionRequest        body                parameter: Required
 * @param    *string                                      idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) CreateSubscription(
	body *CreateSubscriptionRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, body, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Creates a new Subscription item
 * @param    string                                           subscriptionId      parameter: Required
 * @param    *CreateSubscriptionItemRequest        request             parameter: Required
 * @param    *string                                          idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionItemResponse response from the API call
 */
func (s *subscription) CreateSubscriptionItem(
	subscriptionId string,
	request *CreateSubscriptionItemRequest,
	idempotencyKey *string) (*GetSubscriptionItemResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionItemResponse = &GetSubscriptionItemResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Creates a discount
 * @param    string                                   subscriptionId      parameter: Required
 * @param    *CreateDiscountRequest        request             parameter: Required
 * @param    *string                                  idempotencyKey      parameter: Optional
 * @return	Returns the *GetDiscountResponse response from the API call
 */
func (s *subscription) CreateDiscount(
	subscriptionId string,
	request *CreateDiscountRequest,
	idempotencyKey *string) (*GetDiscountResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/discounts"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetDiscountResponse = &GetDiscountResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Get Subscription Item
 * @param    string        subscriptionId      parameter: Required
 * @param    string        itemId              parameter: Required
 * @return	Returns the *GetSubscriptionItemResponse response from the API call
 */
func (s *subscription) GetSubscriptionItem(
	subscriptionId string,
	itemId string) (*GetSubscriptionItemResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{item_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"item_id":         itemId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionItemResponse = &GetSubscriptionItemResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string                                                    subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionAffiliationIdRequest        request             parameter: Required
 * @param    *string                                                   idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionAffiliationId(
	subscriptionId string,
	request *UpdateSubscriptionAffiliationIdRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/gateway-affiliation-id"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Create Usage
 * @param    string         subscriptionId      parameter: Required
 * @param    string         itemId              parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetUsageResponse response from the API call
 */
func (s *subscription) CreateAnUsage(
	subscriptionId string,
	itemId string,
	idempotencyKey *string) (*GetUsageResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{item_id}/usages"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"item_id":         itemId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetUsageResponse = &GetUsageResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Gets all subscriptions
 * @param    *int64            page                   parameter: Optional
 * @param    *int64            size                   parameter: Optional
 * @param    *string           code                   parameter: Optional
 * @param    *string           billingType            parameter: Optional
 * @param    *string           customerId             parameter: Optional
 * @param    *string           planId                 parameter: Optional
 * @param    *string           cardId                 parameter: Optional
 * @param    *string           status                 parameter: Optional
 * @param    *time.Time        nextBillingSince       parameter: Optional
 * @param    *time.Time        nextBillingUntil       parameter: Optional
 * @param    *time.Time        createdSince           parameter: Optional
 * @param    *time.Time        createdUntil           parameter: Optional
 * @return	Returns the *ListSubscriptionsResponse response from the API call
 */
func (s *subscription) GetSubscriptions(
	page *int64,
	size *int64,
	code *string,
	billingType *string,
	customerId *string,
	planId *string,
	cardId *string,
	status *string,
	nextBillingSince *time.Time,
	nextBillingUntil *time.Time,
	createdSince *time.Time,
	createdUntil *time.Time) (*ListSubscriptionsResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions"

	//variable to hold errors
	var err error = nil
	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page":               page,
		"size":               size,
		"code":               code,
		"billing_type":       billingType,
		"customer_id":        customerId,
		"plan_id":            planId,
		"card_id":            cardId,
		"status":             status,
		"next_billing_since": nextBillingSince,
		"next_billing_until": nextBillingUntil,
		"created_since":      createdSince,
		"created_until":      createdUntil,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListSubscriptionsResponse = &ListSubscriptionsResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the metadata from a subscription
 * @param    string                                   subscriptionId      parameter: Required
 * @param    *UpdateMetadataRequest        request             parameter: Required
 * @param    *string                                  idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionMetadata(
	subscriptionId string,
	request *UpdateMetadataRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/Subscriptions/{subscription_id}/metadata"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Deletes a subscription item
 * @param    string         subscriptionId           parameter: Required
 * @param    string         subscriptionItemId       parameter: Required
 * @param    *string        idempotencyKey           parameter: Optional
 * @return	Returns the *GetSubscriptionItemResponse response from the API call
 */
func (s *subscription) DeleteSubscriptionItem(
	subscriptionId string,
	subscriptionItemId string,
	idempotencyKey *string) (*GetSubscriptionItemResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{subscription_item_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id":      subscriptionId,
		"subscription_item_id": subscriptionItemId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionItemResponse = &GetSubscriptionItemResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Deletes a usage
 * @param    string         subscriptionId      parameter: Required
 * @param    string         itemId              parameter: Required
 * @param    string         usageId             parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetUsageResponse response from the API call
 */
func (s *subscription) DeleteUsage(
	subscriptionId string,
	itemId string,
	usageId string,
	idempotencyKey *string) (*GetUsageResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{item_id}/usages/{usage_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"item_id":         itemId,
		"usage_id":        usageId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetUsageResponse = &GetUsageResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Deletes a discount
 * @param    string         subscriptionId      parameter: Required
 * @param    string         discountId          parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetDiscountResponse response from the API call
 */
func (s *subscription) DeleteDiscount(
	subscriptionId string,
	discountId string,
	idempotencyKey *string) (*GetDiscountResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/discounts/{discount_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"discount_id":     discountId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetDiscountResponse = &GetDiscountResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Cancels a subscription
 * @param    string                                             subscriptionId      parameter: Required
 * @param    *CreateCancelSubscriptionRequest        request             parameter: Optional
 * @param    *string                                            idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) CancelSubscription(
	subscriptionId string,
	request *CreateCancelSubscriptionRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    string        discountId          parameter: Required
 * @return	Returns the *GetDiscountResponse response from the API call
 */
func (s *subscription) GetDiscountById(
	subscriptionId string,
	discountId string) (*GetDiscountResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/discounts/{discountId}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"discountId":      discountId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetDiscountResponse = &GetDiscountResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    int64         page                parameter: Required
 * @param    int64         size                parameter: Required
 * @return	Returns the *ListDiscountsResponse response from the API call
 */
func (s *subscription) GetDiscounts(
	subscriptionId string,
	page int64,
	size int64) (*ListDiscountsResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/discounts/"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page": page,
		"size": size,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListDiscountsResponse = &ListDiscountsResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Creates a increment
 * @param    string                                    subscriptionId      parameter: Required
 * @param    *CreateIncrementRequest        request             parameter: Required
 * @param    *string                                   idempotencyKey      parameter: Optional
 * @return	Returns the *GetIncrementResponse response from the API call
 */
func (s *subscription) CreateIncrement(
	subscriptionId string,
	request *CreateIncrementRequest,
	idempotencyKey *string) (*GetIncrementResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/increments"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetIncrementResponse = &GetIncrementResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    *int64        page                parameter: Optional
 * @param    *int64        size                parameter: Optional
 * @return	Returns the *ListIncrementsResponse response from the API call
 */
func (s *subscription) GetIncrements(
	subscriptionId string,
	page *int64,
	size *int64) (*ListIncrementsResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/increments/"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page": page,
		"size": size,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListIncrementsResponse = &ListIncrementsResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Deletes a increment
 * @param    string         subscriptionId      parameter: Required
 * @param    string         incrementId         parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetIncrementResponse response from the API call
 */
func (s *subscription) DeleteIncrement(
	subscriptionId string,
	incrementId string,
	idempotencyKey *string) (*GetIncrementResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/increments/{increment_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"increment_id":    incrementId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.DeleteWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetIncrementResponse = &GetIncrementResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string         subscriptionId      parameter: Required
 * @param    *string        cycleId             parameter: Optional
 * @param    *int64         size                parameter: Optional
 * @param    *int64         page                parameter: Optional
 * @param    *string        itemId              parameter: Optional
 * @param    *string        group               parameter: Optional
 * @return	Returns the *GetUsagesDetailsResponse response from the API call
 */
func (s *subscription) GetUsagesDetails(
	subscriptionId string,
	cycleId *string,
	size *int64,
	page *int64,
	itemId *string,
	group *string) (*GetUsagesDetailsResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/usages-details/"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"cycle_id": cycleId,
		"size":     size,
		"page":     page,
		"item_id":  itemId,
		"group":    group,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetUsagesDetailsResponse = &GetUsagesDetailsResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Lists all usages from a subscription item
 * @param    string         subscriptionId      parameter: Required
 * @param    string         itemId              parameter: Required
 * @param    *int64         page                parameter: Optional
 * @param    *int64         size                parameter: Optional
 * @param    *string        code                parameter: Optional
 * @param    *string        group               parameter: Optional
 * @return	Returns the *ListUsagesResponse response from the API call
 */
func (s *subscription) GetUsages(
	subscriptionId string,
	itemId string,
	page *int64,
	size *int64,
	code *string,
	group *string) (*ListUsagesResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items/{item_id}/usages"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"item_id":         itemId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page":  page,
		"size":  size,
		"code":  code,
		"group": group,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListUsagesResponse = &ListUsagesResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Get Subscription Items
 * @param    string         subscriptionId      parameter: Required
 * @param    *int64         page                parameter: Optional
 * @param    *int64         size                parameter: Optional
 * @param    *string        name                parameter: Optional
 * @param    *string        code                parameter: Optional
 * @param    *string        status              parameter: Optional
 * @param    *string        description         parameter: Optional
 * @param    *string        createdSince        parameter: Optional
 * @param    *string        createdUntil        parameter: Optional
 * @return	Returns the *ListSubscriptionItemsResponse response from the API call
 */
func (s *subscription) GetSubscriptionItems(
	subscriptionId string,
	page *int64,
	size *int64,
	name *string,
	code *string,
	status *string,
	description *string,
	createdSince *string,
	createdUntil *string) (*ListSubscriptionItemsResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/items"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page":          page,
		"size":          size,
		"name":          name,
		"code":          code,
		"status":        status,
		"description":   description,
		"created_since": createdSince,
		"created_until": createdUntil,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListSubscriptionItemsResponse = &ListSubscriptionItemsResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the boleto due days from a subscription
 * @param    string                                              subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionDueDaysRequest        request             parameter: Required
 * @param    *string                                             idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionDueDays(
	subscriptionId string,
	request *UpdateSubscriptionDueDaysRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/boleto-due-days"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Atualização do valor mínimo da assinatura
 * @param    string                                                   subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionMinimumPriceRequest        request             parameter: Required
 * @param    *string                                                  idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionMiniumPrice(
	subscriptionId string,
	request *UpdateSubscriptionMinimumPriceRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/minimum_price"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * Updates the billing date from a subscription
 * @param    string                                                  subscriptionId      parameter: Required
 * @param    *UpdateSubscriptionBillingDateRequest        request             parameter: Required
 * @param    *string                                                 idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateSubscriptionBillingDate(
	subscriptionId string,
	request *UpdateSubscriptionBillingDateRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/billing-date"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string                                              subscriptionId      parameter: Required
 * @param    *UpdateCurrentCycleEndDateRequest        request             parameter: Required
 * @param    *string                                             idempotencyKey      parameter: Optional
 * @return	Returns the *GetSubscriptionResponse response from the API call
 */
func (s *subscription) UpdateLatestPeriodEndAt(
	subscriptionId string,
	request *UpdateCurrentCycleEndDateRequest,
	idempotencyKey *string) (*GetSubscriptionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/periods/latest/end-at"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetSubscriptionResponse = &GetSubscriptionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string                                             subscriptionId      parameter: Required
 * @param    *UpdateCurrentCycleStatusRequest        request             parameter: Required
 * @param    *string                                            idempotencyKey      parameter: Optional
 * @return	Returns the  response from the API call
 */
func (s *subscription) UpdateCurrentCycleStatus(
	subscriptionId string,
	request *UpdateCurrentCycleStatusRequest,
	idempotencyKey *string) error {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/cycle-status"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"content-type":    "application/json; charset=utf-8",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PatchWithAuth(_queryBuilder, headers, request, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return err
	}

	//returning the response
	return nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    string        page                parameter: Required
 * @param    string        size                parameter: Required
 * @return	Returns the *ListCyclesResponse response from the API call
 */
func (s *subscription) GetSubscriptionCycles(
	subscriptionId string,
	page string,
	size string) (*ListCyclesResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/cycles"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//process optional query parameters
	_queryBuilder, err = helper.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{}{
		"page": page,
		"size": size,
	})
	if err != nil {
		//error in query param handling
		return nil, err
	}

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *ListCyclesResponse = &ListCyclesResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    string        cycleId             parameter: Required
 * @return	Returns the *GetPeriodResponse response from the API call
 */
func (s *subscription) GetSubscriptionCycleById(
	subscriptionId string,
	cycleId string) (*GetPeriodResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/cycles/{cycleId}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"cycleId":         cycleId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetPeriodResponse = &GetPeriodResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string         subscriptionId      parameter: Required
 * @param    *string        idempotencyKey      parameter: Optional
 * @return	Returns the *GetPeriodResponse response from the API call
 */
func (s *subscription) RenewSubscription(
	subscriptionId string,
	idempotencyKey *string) (*GetPeriodResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/cycles"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent":      "MundiSDK - Go 0.16.12",
		"accept":          "application/json",
		"idempotency-key": helper.ToString(idempotencyKey, ""),
	}

	//prepare API request
	_request := unirest.PostWithAuth(_queryBuilder, headers, nil, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetPeriodResponse = &GetPeriodResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}

/**
 * TODO: type endpoint description here
 * @param    string        subscriptionId      parameter: Required
 * @param    string        periodId            parameter: Required
 * @return	Returns the *GetUsageReportResponse response from the API call
 */
func (s *subscription) GetUsageReport(
	subscriptionId string,
	periodId string) (*GetUsageReportResponse, error) {
	//the endpoint path uri
	_pathUrl := "/subscriptions/{subscription_id}/periods/{period_id}/usages/report"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"subscription_id": subscriptionId,
		"period_id":       periodId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, s.config.BasicAuthUserName(), s.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetUsageReportResponse = &GetUsageReportResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}
