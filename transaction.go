/*
 * mundiapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package mundiapi

import (
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"github.com/mundipagg/mundiapi/internal/helper"
)

/*
 * Interface for the transaction
 */
type Transactions interface {
	GetTransaction(string) (*GetTransactionResponse, error)
}

/*
 * Factory for the Transactions interaface returning transaction
 */
func NewTransactions(config Configuration) *transaction {
	client := new(transaction)
	client.config = config
	return client
}

/*
 * Client structure as interface implementation
 */
type transaction struct {
	config Configuration
}

/**
 * TODO: type endpoint description here
 * @param    string        transactionId      parameter: Required
 * @return	Returns the *GetTransactionResponse response from the API call
 */
func (t *transaction) GetTransaction(
	transactionId string) (*GetTransactionResponse, error) {
	//the endpoint path uri
	_pathUrl := "/transactions/{transaction_id}"

	//variable to hold errors
	var err error = nil
	//process optional template parameters
	_pathUrl, err = helper.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{}{
		"transaction_id": transactionId,
	})
	if err != nil {
		//error in template param handling
		return nil, err
	}

	//the base uri for api requests
	_queryBuilder := BASEURI

	//prepare query string for API call
	_queryBuilder = _queryBuilder + _pathUrl

	//validate and preprocess url
	_queryBuilder, err = helper.CleanUrl(_queryBuilder)
	if err != nil {
		//error in url validation or cleaning
		return nil, err
	}
	//prepare headers for the outgoing request
	headers := map[string]interface{}{
		"user-agent": "MundiSDK - Go 0.16.12",
		"accept":     "application/json",
	}

	//prepare API request
	_request := unirest.GetWithAuth(_queryBuilder, headers, t.config.BasicAuthUserName(), t.config.BasicAuthPassword())
	//and invoke the API call request to fetch the response
	_response, err := unirest.AsString(_request, false)
	if err != nil {
		//error in API invocation
		return nil, err
	}

	//error handling using HTTP status codes
	if _response.Code == 400 {
		err = helper.NewAPIError("Invalid request", _response.Code, _response.RawBody)
	} else if _response.Code == 401 {
		err = helper.NewAPIError("Invalid API key", _response.Code, _response.RawBody)
	} else if _response.Code == 404 {
		err = helper.NewAPIError("An informed resource was not found", _response.Code, _response.RawBody)
	} else if _response.Code == 412 {
		err = helper.NewAPIError("Business validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 422 {
		err = helper.NewAPIError("Contract validation error", _response.Code, _response.RawBody)
	} else if _response.Code == 500 {
		err = helper.NewAPIError("Internal server error", _response.Code, _response.RawBody)
	} else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
		err = helper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
	}
	if err != nil {
		//error detected in status code validation
		return nil, err
	}

	//returning the response
	var retVal *GetTransactionResponse = &GetTransactionResponse{}
	err = json.Unmarshal(_response.RawBody, &retVal)

	if err != nil {
		//error in parsing
		return nil, err
	}
	return retVal, nil

}
